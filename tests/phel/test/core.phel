(ns phel\test\core
  (:require phel\test :refer [deftest is-equals is-nil is-true]))

# -------------
# Destructuring
# -------------

(deftest destructure-tuple
  (is-equals 3 (let [[a b] @[1 2]] (+ a b)) "from array")
  (is-equals 3 (let [[a b] (php/array 1 2)] (+ a b)) "from php array")
  (is-equals 10 (let [[a [c d] b] @[1 (tuple 4 3) 2]] (+ a b c d)) "nested")
  (is-equals 4 (let [[a _ b] @[1 2 3]] (+ a b)) "ignore value"))

(deftest destructure-table
  (is-equals 3 (let [@{:a a :b b} @{:a 1 :b 2}] (+ a b)) "destructure table")
  (is-equals 6 (let [@{:a [a1 a2] :b b} @{:a [1 3] :b 2}] (+ a1 a2 b)) "nested destructure table")
  (is-equals 3 (let [@[0 a 1 b] @[1 2]] (+ a b)) "destructure array")
  (is-equals 3 (let [@[0 a 1 b] (php/array 1 2)] (+ a b)) "destructure array on PHP arrays")
  (is-equals 6 (let [@[0 [a1 a2] 1 b] @[[1 3] 2]] (+ a1 a2 b)) "nested destructure array"))

# ----------------------------
# Basic methods for quasiquote
# ----------------------------

(deftest test-next
  (is-nil (next []) "next of empty tuple")
  (is-nil (next [1]) "next of one element tuple")
  (is-equals [2] (next [1 2]) "next of two element tuple"))

(deftest test-concat
  (is-equals @[1 2] (concat @[1 2]) "concat one argument")
  (is-equals @[1 2 3 4] (concat @[1] @[2 3] @[4]) "concat three arguments")
  (is-equals [1 2 3 4] (concat [1 2] [3 4]) "concat tuples"))

(deftest test-set-push
  (let [s1 (set 1 2)
        s2 (push s1 3)]
    (is-equals (set 1 2 3) s2 "set push"))
  (let [s1 (set 1 2)
        s2 (push s1 2)]
    (is-equals (set 1 2) s2 "set push existing value")))

(deftest test-set-first
  (is-equals 1 (first (set 1 2 3)) "set first element")
  (is-nil (first (set)) "set first element from empty set"))

(deftest test-set-second
  (is-equals 2 (second (set 1 2 3)) "set second element")
  (is-nil (second (set)) "set second element from empty set")
  (is-nil (second (set 1)) "set second element from 1-ary set"))

(deftest test-set-concat
  (is-equals (set 0 1 2 3) (concat (set 1 2) @[0 3]) "set concat array")
  (is-equals (set 0 1 2 3) (concat (set 1 2) @[0 1 2 3]) "set concat array with common values")
  (is-equals (set 0 1 2) (concat (set 1 2) (set 0 1)) "set concat"))

(defstruct my-struct [a b c])

(deftest test-struct
  (let [x (my-struct 1 2 3)]
    (is-equals :struct (type x) "struct: common type")
    (is-true (struct? x) "struct: common type test")
    (is-equals false (table? x) "struct is not a table")
    (is-equals 1 (get x :a) "struct: get value from struct")
    (is-equals (my-struct 12 2 3) (put x :a 12) "struct: put value on struct")
    (is-true (my-struct? x) "struct: correct type")
    (is-equals false (my-struct? :a) "struct: incorrect type")))

(deftest test-__FILE__
  (is-true (>= (php/strpos __FILE__ "tests/phel/test/core.phel") 0) "__FILE__"))

(deftest test-__DIR__
  (is-true (and (false? (php/strpos __DIR__ "tests/phel/test/core.phel"))
                (>= (php/strpos __DIR__ "tests/phel/test") 0)) "__DIR__"))
