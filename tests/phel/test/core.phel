(ns phel\test\core
  (:require phel\test :refer [deftest is]))

# -------------
# Destructuring
# -------------

(deftest destructure-tuple
  (is (= 3 (let [[a b] @[1 2]] (+ a b))) "from array")
  (is (= 3 (let [[a b] (php/array 1 2)] (+ a b))) "from php array")
  (is (= 10 (let [[a [c d] b] @[1 (tuple 4 3) 2]] (+ a b c d))) "nested")
  (is (= 4 (let [[a _ b] @[1 2 3]] (+ a b))) "ignore value"))

(deftest destructure-table
  (is (= 3 (let [@{:a a :b b} @{:a 1 :b 2}] (+ a b))) "destructure table")
  (is (= 6 (let [@{:a [a1 a2] :b b} @{:a [1 3] :b 2}] (+ a1 a2 b))) "nested destructure table")
  (is (= 3 (let [@[0 a 1 b] @[1 2]] (+ a b))) "destructure array")
  (is (= 3 (let [@[0 a 1 b] (php/array 1 2)] (+ a b))) "destructure array on PHP arrays")
  (is (= 6 (let [@[0 [a1 a2] 1 b] @[[1 3] 2]] (+ a1 a2 b))) "nested destructure array"))

# ----------------------------
# Basic methods for quasiquote
# ----------------------------

(deftest test-next
  (is (= nil (next [])) "next of empty tuple")
  (is (= nil (next [1])) "next of one element tuple")
  (is (= [2] (next [1 2])) "next of two element tuple"))

(deftest test-concat
  (is (= @[1 2] (concat @[1 2])) "concat one argument")
  (is (= @[1 2 3 4] (concat @[1] @[2 3] @[4])) "concat three arguments")
  (is (= [1 2 3 4] (concat [1 2] [3 4])) "concat tuples"))

(deftest test-set-push
  (let [s1 (set 1 2)
        s2 (push s1 3)]
    (is (= (set 1 2 3) s2) "set push"))
  (let [s1 (set 1 2)
        s2 (push s1 2)]
    (is (= (set 1 2) s2) "set push existing value")))

(deftest test-set-first
  (is (= 1 (first (set 1 2 3))) "set first element")
  (is (= nil (first (set))) "set first element from empty set"))

(deftest test-set-second
  (is (= 2 (second (set 1 2 3))) "set second element")
  (is (= nil (second (set))) "set second element from empty set")
  (is (= nil (second (set 1))) "set second element from 1-ary set"))

(deftest test-set-concat
  (is (= (set 0 1 2 3) (concat (set 1 2) @[0 3])) "set concat array")
  (is (= (set 0 1 2 3) (concat (set 1 2) @[0 1 2 3])) "set concat array with common values")
  (is (= (set 0 1 2) (concat (set 1 2) (set 0 1))) "set concat"))

(defstruct my-struct [a b c])

(deftest test-struct
  (let [x (my-struct 1 2 3)]
    (is (= :struct (type x)) "struct: common type")
    (is (= true (struct? x)) "struct: common type test")
    (is (= false (table? x)) "struct is not a table")
    (is (= 1 (get x :a)) "struct: get value from struct")
    (is (= (my-struct 12 2 3) (put x :a 12)) "struct: put value on struct")
    (is (= true (my-struct? x)) "struct: correct type")
    (is (= false (my-struct? :a)) "struct: incorrect type")))

(deftest test-__FILE__
  (is (= true (>= (php/strpos __FILE__ "tests/phel/test/core.phel") 0)) "__FILE__"))

(deftest test-__DIR__
  (is (= true (and (false? (php/strpos __DIR__ "tests/phel/test/core.phel")) (>= (php/strpos __DIR__ "tests/phel/test") 0))) "__DIR__"))
