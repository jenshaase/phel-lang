(ns phel\test\core
  (:use DateTime))

(defstruct my-struct [a b c]) # using defstruct in an anonymous function result in a parse error

(defn test [assert] (do

  # -------------
  # Destructuring
  # -------------

  (assert = (let [[a b] @[1 2]] (+ a b)) 3 "destructure tuple")
  (assert = (let [[a b] (php/array 1 2)] (+ a b)) 3 "destructure tuple on PHP arrays")
  (assert = (let [[a [c d] b] @[1 (tuple 4 3) 2]] (+ a b c d)) 10 "nested destructured")
  (assert = (let [[a _ b] @[1 2 3]] (+ a b)) 4 "destructure tuple, ignore values")

  (assert = (let [@{:a a :b b} @{:a 1 :b 2}] (+ a b)) 3 "destructure table")
  (assert = (let [@{:a [a1 a2] :b b} @{:a [1 3] :b 2}] (+ a1 a2 b)) 6 "nested destructure table")
  (assert = (let [@[0 a 1 b] @[1 2]] (+ a b)) 3 "destructure array")
  (assert = (let [@[0 a 1 b] (php/array 1 2)] (+ a b)) 3 "destructure array on PHP arrays")
  (assert = (let [@[0 [a1 a2] 1 b] @[[1 3] 2]] (+ a1 a2 b)) 6 "nested destructure array")

  # ------------------
  # Basic constructors
  # ------------------

  (assert = '(1 2 3) (tuple '1 '2 '3) "construct tuple")
  (assert = '[1 2 3] (tuple-brackets '1 '2 '3) "construct bracket tuple")
  (assert = @[1 2 3] (array 1 2 3) "construct array")
  (assert = :a (keyword "a") "construct keyword")
  (assert = @{:a 1 :b 2} (table :a 1 :b 2) "construct table")

  (let [arr (php-indexed-array "a" "b")]
    (assert = "a" (php/aget arr 0) "php-associative-array: first key")
    (assert = "b" (php/aget arr 1) "php-associative-array: second key"))

  (let [arr (php-associative-array "a" 1 "b" 2)]
    (assert = 1 (php/aget arr "a") "php-associative-array: first key")
    (assert = 2 (php/aget arr "b") "php-associative-array: second key"))

  # ----------------------------
  # Basic methods for quasiquote
  # ----------------------------

  (assert = nil (next []) "next of empty tuple")
  (assert = nil (next [1]) "next of one element tuple")
  (assert = [2] (next [1 2]) "next of two element tuple")

  (assert = @[1 2] (concat @[1 2]) "concat one argument")
  (assert = @[1 2 3 4] (concat @[1] @[2 3] @[4]) "concat three arguments")
  (assert = [1 2 3 4] (concat [1 2] [3 4]) "concat tuples")

  # -------------------------
  # Basic sequence operations
  # -------------------------

  (assert = (php/array 1 2) (cons 1 (php/array 2)) "cons php array")
  (assert = [1 2] (cons 1 [2]) "cons tuple")
  (assert = @[1 2] (cons 1 @[2]) "cons array")
  (assert = @[1] (cons 1 nil) "cons nil")

  (assert = 1 (first [1]) "first of tuple")
  (assert = nil (first []) "frist of empty tuple")
  (assert = 1 (first @[1]) "first of array")
  (assert = nil (first @[]) "frist of empty array")
  (assert = 1 (first (php/array 1)) "first of php array")
  (assert = nil (first (php/array)) "frist of empty php array")
  (assert = nil (first nil) "frist of nil")

  (assert = 1 (ffirst [[1]]) "ffirst of nested tuple")
  (assert = nil (ffirst [1]) "ffirst of tuple")
  (assert = nil (ffirst nil) "ffirst of nil")

  (assert = 2 (second [1 2]) "second of tuple")
  (assert = nil (second []) "second of empty tuple")
  (assert = 2 (second @[1 2]) "second of array")
  (assert = nil (second @[]) "second of empty array")
  (assert = 2 (second (php/array 1 2)) "second of pgp array")
  (assert = nil (second (php/array)) "second of empty php array")
  (assert = nil (second nil) "second of nil")

  (assert = [2] (rest [1 2]) "rest of two element tuple")
  (assert = [] (rest [1]) "rest of one element tuple")
  (assert = [] (rest []) "rest of empty tuple")

  (assert = [2] (nfirst [[1 2]]) "(nfirst [[1 2]])")
  (assert = [3] (nnext [1 2 3]) "(nnext [1 2 3])")

  (assert = 0 (count []) "count of empty tuple")
  (assert = 0 (count nil) "count of nil")
  (assert = 0 (count @[]) "count of empty array")
  (assert = 0 (count (php/array)) "count of empty php array")
  (assert = 0 (count @{}) "count of empty table")
  (assert = 1 (count ["a"]) "count of one element tuple")
  (assert = 1 (count @["a"]) "count of one element array")
  (assert = 1 (count (php/array "a")) "count of one element php array")
  (assert = 1 (count @{:a 1}) "count of one element table")

  # ------------------------
  # Control structure macros
  # ------------------------

  (assert = 2 (if-not true 1 2) "if-not true")
  (assert = 1 (if-not false 1 2) "if-not false")

  (assert = 1 (when true 1) "when true")
  (assert = nil (when false 1) "when false")

  (assert = nil (when-not true 1) "when-not true")
  (assert = 1 (when-not false 1) "when-not false")

  (assert = nil (cond) "cond zero args")
  (assert = 1 (cond 1) "cond one arg")
  (assert = 1 (cond true 1 2) "cond true")
  (assert = 2 (cond false 1 2) "cond false")

  (assert = nil (case true) "case zero args")
  (assert = 1 (case true 1) "case one arg")
  # (assert = nil (case true false 2) "case one test without default")
  (assert = 1 (case true false 2 1) "case one failed test with default")
  # (assert = 2 (case true true 2) "case one successful test without default")
  (assert = 2 (case true true 2 1) "case one successful test with default")

  # ----------------
  # Boolean operation
  # ----------------

  (assert = nil (or) "or zero args")
  (assert = true (or true) "(or true)")
  (assert = false (or false) "(or false")
  (assert = true (or true false) "(or true false)")
  (assert = true (or false true) "(or false true)")
  (assert = false (or false false) "(or false false)")
  (assert = 10 (or false 10) "(or false 10)")
  (assert = 10 (or 10) "(or 10)")

  (assert = true (and) "(and)")
  (assert = true (and true) "(and true)")
  (assert = true (and true true) "(and true true)")
  (assert = false (and false) "(and false)")
  (assert = false (and true false) "(and true false)")
  (assert = false (and true false true) "(and true false true)")
  (assert = 10 (and true 10) "(and true 10)")
  (assert = false (and false 10) "(and false 10)")
  (assert = 10 (and 10) "(and 10)")

  (assert = true (id false) "(id false)")
  (assert = true (id false false) "(id false false)")
  (assert = true (id false false false) "(id false false false)")
  (assert = false (id false true false) "(id false true false)")
  (assert = true (id 10 10) "(id 10 10)")
  (assert = false (id 10 10.0) "(id 10 10.0)")
  (assert = true (id :test :test) "keywords are always identical")
  (assert = true (id 'test 'test) "symbol are always identical")
  (assert = false (id [] []) "two empty tuples are not identical")
  (assert = false (id @[] @[]) "two empty arrays are not identical")
  (assert = false (id @{} @{}) "two empty tables are not identical")


  (assert = true (= false) "(= false)")
  (assert = true (= false false) "(= false false)")
  (assert = true (= false false false) "(= false false false)")
  (assert = false (= false true false) "(= false true false)")
  (assert = true (= 10 10) "(= 10 10)")
  (assert = true (= 10 10.0) "(= 10 10.0)")
  (assert = true (= :test :test) "keywords are always equal")
  (assert = true (= 'test 'test) "symbol are always equal")
  (assert = true (= [] []) "two empty tuples are equal")
  (assert = true (= @[] @[]) "two empty arrays are equal")
  (assert = true (= @{} @{}) "two empty tables are equal")

  (assert = false (not true) "(not true)")
  (assert = true (not false) "(not false)")
  (assert = false (not 10) "(not 10)")
  (assert = false (not []) "(not [])")

  (assert = false (not= false) "(not= false)")
  (assert = false (not= false false) "(not= false false)")
  (assert = false (not= false false false) "(not= false false false)")
  (assert = true (not= false true false) "(not= false true false)")
  (assert = false (not= 10 10) "(not= 10 10)")
  (assert = false (not= 10 10.0) "(not= 10 10.0)")

  (assert = true (< 10) "(< 10)")
  (assert = true (< 10 20) "(< 10 20)")
  (assert = true (< 10 20 30) "(< 10 20 30)")
  (assert = false (< 10 10) "(< 10 10)")
  (assert = false (< 10 9) "(< 10 9)")
  (assert = false (< 10 20 15) "(< 10 20 15)")
  (assert = false (< 10 20 20) "(< 10 20 20)")

  (assert = true (<= 10) "(<= 10)")
  (assert = true (<= 10 20) "(<= 10 20)")
  (assert = true (<= 10 20 30) "(<= 10 20 30)")
  (assert = true (<= 10 10) "(<= 10 10)")
  (assert = false (<= 10 9) "(<= 10 9)")
  (assert = false (<= 10 20 15) "(<= 10 20 15)")
  (assert = true (<= 10 20 20) "(<= 10 20 20)")

  (assert = true (> 10) "(> 10)")
  (assert = true (> 20 10) "(> 20 10)")
  (assert = true (> 30 20 10) "(> 30 20 10)")
  (assert = false (> 10 10) "(> 10 10)")
  (assert = false (> 9 10) "(> 9 10)")
  (assert = false (> 20 10 15) "(> 20 20 15)")
  (assert = false (> 20 20 10) "(> 20 20 10)")

  (assert = true (>= 10) "(>= 10)")
  (assert = true (>= 20 10) "(>= 20 10)")
  (assert = true (>= 30 20 10) "(>= 30 20 10)")
  (assert = true (>= 10 10) "(>= 10 10)")
  (assert = false (>= 9 10) "(>= 9 10)")
  (assert = false (>= 20 10 15) "(>= 20 20 15)")
  (assert = true (>= 20 20 10) "(>= 20 20 10)")

  (assert = true (all? pos? @[1 2 3]) "all pos? in list")
  (assert = true (all? pos? @[]) "all pos? in empty list")
  (assert = false (all? pos? @[1 -1 3]) "all pos? in list")

  (assert = true (some? pos? @[1 2 3]) "some pos? in list")
  (assert = false (some? pos? @[]) "some pos? in empty list")
  (assert = true (some? pos? @[1 -1 3]) "some pos? in list")
  (assert = false (some? pos? @[-1 -1 -3]) "some pos? in list")

  (assert = true (true? true) "(true? true)")
  (assert = false (true? []) "(true? [])")
  (assert = false (true? 10) "(true? 10)")
  (assert = false (true? nil) "(true? nil)")
  (assert = false (true? false) "(true? false)")

  (assert = true (truthy? true) "(truthy? true)")
  (assert = true (truthy? []) "(truthy? [])")
  (assert = true (truthy? 10) "(truthy? 10)")
  (assert = false (truthy? nil) "(truthy? nil)")
  (assert = false (truthy? false) "(truthy? false)")

  (assert = true (false? false) "(false? false)")
  (assert = false (false? nil) "(false? nil)")
  (assert = false (false? true) "(false? true)")

  (assert = -1 (compare 1 2) "(compare 1 2)")
  (assert = 1 (compare 2 1) "(compare 2 1)")
  (assert = 0 (compare 1 1) "(compare 1 1)")

  # --------------
  # Type operation
  # --------------

  (assert = :tuple (type []) "type of bracket tuple")
  (assert = :tuple (type '()) "type of tuple")
  (assert = :table (type @{}) "type of table")
  (assert = :keyword (type :test) "type of keyword")
  (assert = :symbol (type 'x) "type of symbol")
  (assert = :int (type 10) "type of int")
  (assert = :float (type 10.0) "type of float")
  (assert = :string (type "test") "type of string")
  (assert = :nil (type nil) "type of nil")
  (assert = :boolean (type true) "type of boolean")
  (assert = :boolean (type false) "type of boolean")
  (assert = :function (type concat) "type of function")
  (assert = :php/array (type (php/array)) "type of php array")
  (assert = :php/resource (type (php/tmpfile)) "type of php resource")
  (assert = :php/object (type (php/new DateTime)) "type of php object")

  (assert = true (nil? nil) "nil? on nil")
  (assert = false (nil? false) "nil? on false")
  (assert = false (nil? true) "nil? on true")

  (assert = true (float? 10.0) "float? on 10.0")
  (assert = true (float? 0.0) "float? on 0.0")
  (assert = false (float? 10) "float? on 10")
  (assert = false (float? 0) "float? on 10")

  (assert = false (int? 10.0) "int? on 10.0")
  (assert = false (int? 0.0) "int? on 0.0")
  (assert = true (int? 10) "int? on 10")
  (assert = true (int? 0) "int? on 10")

  (assert = true (number? 10.0) "number? on 10.0")
  (assert = true (number? 0.0) "number? on 0.0")
  (assert = true (number? 10) "number? on 10")
  (assert = true (number? 0) "number? on 10")
  (assert = false (number? "10") "number? on '10'")
  (assert = false (number? "0") "number? on '0'")

  (assert = true (string? "test") "string? on 'test'")
  (assert = true (string? "") "string? on empty string")
  (assert = true (string? ":test") "string? on ':test'")

  (assert = true (keyword? :test) "keyword? on :test")
  (assert = false (keyword? ":test") "keyword? on string")

  (assert = true (symbol? 'x) "symbol? on 'x")

  (assert = true (function? concat) "function? on concat")

  (assert = true (table? @{}) "table?")

  (assert = true (array? @[]) "array? on phel array")
  (assert = false (array? (php/array)) "array? on php array")

  (assert = true (tuple? []) "tuple?")
  (assert = true (tuple-brackets? []) "tuple-brackets?")
  (assert = true (tuple-parens? '()) "tuple-parens?")

  (assert = true (boolean? true) "boolean? on true")
  (assert = true (boolean? false) "boolean? on false")
  (assert = false (boolean? nil) "boolean? on nil")

  (assert = true (php-array? (php/array)) "php-array? on php array")
  (assert = false (php-array? @[]) "php-array? on phel array")

  (assert = true (php-resource? (php/tmpfile)) "php-resource?")

  (assert = true (php-object? (php/new DateTime)) "php-object?")

  (assert = true (empty? @[]) "empty? on empty phel array")
  (assert = true (empty? []) "empty? on empty phel tuple")
  (assert = true (empty? (php/array)) "empty? on empty php array")
  (assert = true (empty? @{}) "empty? on empty table")
  (assert = false (empty? @[1]) "empty? on one element array")
  (assert = false (empty? [1]) "empty? on one element tuple")
  (assert = false (empty? (php/array 1)) "empty? on one element php array")
  (assert = false (empty? @{:a 1}) "empty? on one element table")

  (assert = false (indexed? @{}) "indexed? on table")
  (assert = true (indexed? @[]) "indexed? on array")
  (assert = true (indexed? []) "indexed? on tuple")
  (assert = true (indexed? (php/array)) "indexed? on php array")

  # ------------------
  # Sequence operation
  # ------------------

  (assert = @["1" "2"] (map str [1 2]) "map1")
  (assert = @["13" "24"] (map str [1 2] [3 4]) "map2")
  (assert = @["13" "24"] (map str [1 2 10] [3 4]) "map2 unequal size")
  (assert = @[[0 "a"] [1 "b"] [2 "c"]] (map-indexed tuple-brackets ["a" "b" "c"]) "map-indexed")
  (assert = @[1 2 3 4 5 6] (mapcat reverse [[3 2 1] [6 5 4]]) "mapcat")
  (assert = @[] (mapcat identity []) "mapcat on empty tuple")
  (assert = @[] (mapcat identity @[]) "mapcat on empty array")

  (assert = "abc" (reduce str "" ["a" "b" "c"]) "reduce three elements tuple")
  (assert = "x" (reduce str "x" []) "reduce empty tuple")

  (assert = "abc" (reduce2 str ["a" "b" "c"]) "reduce2 three elements tuple")
  (assert = "a" (reduce2 str ["a"]) "reduce2 one element tuple")
  (assert = "" (reduce2 str []) "reduce2 empty tuple")

  (assert = 3 (peek [1 2 3]) "peek on tuple")
  (assert = nil (peek []) "peek on empty tuple")
  (assert = 3 (peek @[1 2 3]) "peek on array")
  (assert = nil (peek @[]) "peek on empty array")
  (assert = 3 (peek (php/array 1 2 3)) "peek on php array")
  (assert = nil (peek (php/array)) "peek on empty php array")

  (let [x @[]]
    (push x 1)
    (assert = @[1] x "push on array"))

  (let [x (php/array)]
    (push x 1)
    (assert = (php/array 1) x "push on PHP array"))

  (let [x @[1 2]
        y (pop x)]
    (assert = @[1] x "pop: last element is removed")
    (assert = 2 y "pop: last element is returned"))

  (let [x (php/array 1 2)
        y (pop x)]
    (assert = (php/array 1) x "pop on PHP array: last element is removed")
    (assert = 2 y "pop on PHP array: last element is returned"))

  (let [xs @[1 2 3 4]
       removed (remove xs 2)]
    (assert = @[1 2] xs "remove: elements are removed")
    (assert = @[3 4] removed "remove: correct value is returned"))

  (let [xs (php/array 1 2 3 4)
       removed (remove xs 2)]
    (assert = (php/array 1 2) xs "remove on PHP array: elements are removed")
    (assert = (php/array 3 4) removed "remove on PHP array: correct value is returned"))

  (let [xs @[1 2 3 4]
       removed (remove xs 2 1)]
    (assert = @[1 2 4] xs "remove with length: elements are removed")
    (assert = @[3] removed "remove with length: correct value is returned"))

  (let [xs (php/array 1 2 3 4)
       removed (remove xs 2 1)]
    (assert = (php/array 1 2 4) xs "remove with length on PHP array: elements are removed")
    (assert = (php/array 3) removed "remove with length on PHP array: correct value is returned"))

  (assert = @[3 4] (slice @[1 2 3 4] 2) "slice on array")
  (assert = @[3] (slice @[1 2 3 4] 2 1) "slice with length on array")
  (assert = [3 4] (slice [1 2 3 4] 2) "slice on tuple")
  (assert = [3] (slice [1 2 3 4] 2 1) "slice with length on tuple")

  (assert = "b" (get (php/array "a" "b" "c") 1) "get on php array")
  (assert = "b" (get @["a" "b" "c"] 1) "get on array")
  (assert = "b" (get ["a" "b" "c"] 1) "get on tuple")
  (assert = "a" (get @{:a "a" :b "b"} :a) "get on table")
  (assert = nil (get nil 1) "get on nil")
  (assert = nil (get @["a" "b" "c"] 10) "get on undefined index")
  (assert = nil (get @{:a "a" :b "b"} :c) "get on undefined key")
  (assert = "x" (get nil 1 "x") "get on nil with optional value")
  (assert = "x" (get @["a" "b" "c"] 10 "x") "get on undefined index with optional value")
  (assert = "x" (get @{:a "a" :b "b"} :c "x") "get on undefined key with optional value")
  (assert id 0 (get @{:a 0} :a) "gets zero from a table")

  (assert = "a" (get-in @["a"] [0]) "get-in level 1")
  (assert = "a" (get-in @{:a @["a"]} [:a 0]) "get-in level 2")
  (assert = "a" (get-in @{:a @[["b" "a"]]} [:a 0 1]) "get-in level 3")
  (assert = "x" (get-in @{:a @[["b" "a"]]} [:b 0 1] "x") "get-in level 3 with default")

  (assert = @["a" "c"] (put @["a" "b"] 1 "c") "put: replace entry on array")
  (assert = @["a" "b" "c"] (put @["a" "b"] 2 "c") "put: append entry on array")
  (assert = @[nil nil "a"] (put @[] 2 "a") "put: extends array with nil values")
  (assert = @["a" nil "c"] (put @["a" "b" "c"] 1 nil) "put: set nil value")
  (assert = @{:a nil :b 2} (put @{:a 1 :b 2} :a nil) "put: nil on table")
  (assert = @{:a 3 :b 2} (put @{:a 1 :b 2} :a 3) "put: replace entry on table")
  (assert = @{:a 1 :b 2 :c 3} (put @{:a 1 :b 2} :c 3) "put: append entry on table")

  (assert = @[:a :c :d] (unset @[:a :b :c :d] 1) "unset: remove index from array")
  (assert = @{:b 2} (unset @{:a 1 :b 2} :a) "unset: remove key from table")

  (assert = @{:a @{:b @{:c 1}}} (put-in @{:a @{}} @[:a :b :c] 1) "put-in: autocreate tables")
  (assert = @{:a @{:b @{:c 2}}} (put-in @{:a @{:b @{:c 1}}} @[:a :b :c] 2) "put-in: update value of table")
  (assert = @{:a @{:b @[2]}} (put-in @{:a @{:b @[1]}} @[:a :b 0] 2) "put-in: update value of array")

  (assert = @{:a 2} (update-in @{:a 1} @[:a] inc) "update-in: update value of table")
  (assert = @{:a @{:b @{:c 1}}} (update-in @{:a @{}} @[:a :b :c] inc) "update-in: autocreate tables")
  (assert = @{:a @{:b @[2]}} (update-in @{:a @{:b @[1]}} @[:a :b 0] inc) "update-in: update value of array")

  (assert = @["a" "b" "c"] (drop 0 @["a" "b" "c"]) "drop two elements")
  (assert = @["c"] (drop 2 @["a" "b" "c"]) "drop two elements")
  (assert = @[] (drop 3 @["a" "b" "c"]) "drop three elements")
  (assert = @[] (drop 4 @["a" "b" "c"]) "drop four elements")
  (assert = @["a" "b" "c"] (drop -1 @["a" "b" "c"]) "drop with negative number")
  (assert = ["c"] (drop 2 ["a" "b" "c"]) "drop on tuple")
  (assert = (php/array "c") (drop 2 (php/array "a" "b" "c")) "drop on php array")

  (assert = @[1 2 3 4 -1 -2 -3] (drop-while neg? @[-1 -2 -3 1 2 3 4 -1 -2 -3]) "drop-while: first three element")
  (assert = @[] (drop-while neg? @[-1 -2 -3]) "drop-while: everything")
  (assert = @[] (drop-while neg? @[]) "drop-while: empty array")
  (assert = @[1 2 3 4] (drop-while neg? @[1 2 3 4]) "drop-while: nothing")
  (assert = [1 2 3 4 -1 -2 -3] (drop-while neg? [-1 -2 -3 1 2 3 4 -1 -2 -3]) "drop-while: tuple")
  (assert = (php/array 1 2 3 4 -1 -2 -3) (drop-while neg? (php/array -1 -2 -3 1 2 3 4 -1 -2 -3)) "drop-while: php array")

  (assert = @["a" "b"] (take 2 @["a" "b" "c"]) "take two elements")
  (assert = @["a" "b" "c"] (take 3 @["a" "b" "c"]) "take three elements")
  (assert = @["a" "b" "c"] (take 4 @["a" "b" "c"]) "take four elements")
  (assert = @[] (take 0 @["a" "b" "c"]) "take zero elements")
  (assert = @[] (take -1 @["a" "b" "c"]) "take with negative number")
  (assert = ["a" "b"] (take 2 ["a" "b" "c"]) "take on tuple")
  (assert = (php/array "a" "b") (take 2 (php/array "a" "b" "c")) "take on php array")

  (assert = @[-1 -2 -3] (take-while neg? @[-1 -2 -3 1 2 3 4 -4 -5 -6]) "take-while: first three element")
  (assert = @[-1 -2 -3] (take-while neg? @[-1 -2 -3]) "take-while: everything")
  (assert = @[] (take-while neg? @[1 2 3 4]) "take-while: nothing")
  (assert = @[] (take-while neg? @[]) "take-while: empty array")
  (assert = @[-1 -2 -3] (take-while neg? [-1 -2 -3 1 2 3 4 -4 -5 -6]) "take-while on tuple")
  (assert = @[-1 -2 -3] (take-while neg? (php/array -1 -2 -3 1 2 3 4 -4 -5 -6)) "take-while on php array")

  (assert = @[-1 -2 -3] (filter neg? @[-1 2 3 -2 -3 4 5]) "filter: neg?")
  (assert = @[-1 -2 -3] (filter neg? [-1 2 3 -2 -3 4 5]) "filter on tuple")
  (assert = @[-1 -2 -3] (filter neg? (php/array -1 2 3 -2 -3 4 5)) "filter on php array")

  (assert = @[true false false true true false false] (keep neg? @[-1 2 3 -2 -3 4 5]) "keep: neg?")
  (assert = @[-1 -2 -3] (keep (fn [x] (if (neg? x) x nil)) @[-1 2 3 -2 -3 4 5]) "keep: filter nil")

  (assert = @[:b :d] (keep-indexed (fn [idx x] (if (odd? idx) x)) @[:a :b :c :d :e]) "keep-indexed")

  (assert = -1 (find neg? @[1 2 3 -1 2 3]) "find first neg number")
  (assert = nil (find neg? @[1 2 3 2 3]) "find: nothing to find")
  (assert = nil (find neg? @[]) "find on empty array")

  (assert = 3 (find-index neg? @[1 2 3 -1 2 3]) "find-index first neg number")
  (assert = nil (find-index neg? @[1 2 3 2 3]) "find-index: nothing to find")
  (assert = nil (find-index neg? @[]) "find-index on empty array")

  (assert = @[1 2 3] (distinct @[1 1 2 3 2 2 3 1]) "distinct: array")
  (assert = @[1 2 3] (distinct (php/array 1 1 2 3 2 2 3 1)) "distinct: php array")

  (assert = @[3 2 1] (reverse [1 2 3]) "reverse: tuple")
  (assert = @[3 2 1] (reverse @[1 2 3]) "reverse: array")
  (assert = @[] (reverse nil) "reverse: nil")


  (assert = @[:a 1 :b 2 :c 3] (interleave [:a :b :c] [1 2 3]) "interleave equal size")
  (assert = @[:a 1 :b 2] (interleave [:a :b :c] [1 2]) "interleave different size")

  (assert = @["a" "," "b" "," "c"] (interpose "," ["a" "b" "c"]) "interpose")

  (assert = @{1 2 2 3 3 2 4 1} (frequencies [1 1 2 3 2 2 3 4]) "frequencies")

  (assert = @[:a :b :c] (keys @{:a 1 :b 2 :c 3}) "keys of tables")
  (assert = @[0 1 2] (keys @[3 2 1]) "keys of array")
  (assert = @[0 1 2] (keys [3 2 1]) "keys of tuple")

  (assert = @[1 2 3] (values @{:a 1 :b 2 :c 3}) "values of tables")
  (assert = @[3 2 1] (values @[3 2 1]) "values of array")
  (assert = @[3 2 1] (values [3 2 1]) "values of tuple")

  (assert = @[[:a 1] [:b 2] [:c 3]] (pairs @{:a 1 :b 2 :c 3}) "pairs of tables")
  (assert = @[[0 3] [1 2] [2 1]] (pairs @[3 2 1]) "pairs of array")
  (assert = @[[0 3] [1 2] [2 1]] (pairs [3 2 1]) "pairs of tuple")

  (assert = @[:a 1 :b 2 :c 3] (kvs @{:a 1 :b 2 :c 3}) "kvs of tables")
  (assert = @[0 3 1 2 2 1] (kvs @[3 2 1]) "kvs of array")
  (assert = @[0 3 1 2 2 1] (kvs [3 2 1]) "kvs of tuple")

  (assert = (php/array 3 2 1) (to-php-array @[3 2 1]) "to-php-array")

  (assert = @[1 2 3] (sort @[3 2 1]) "sort")
  (assert = @[3 3 2 2 1] (sort @[3 2 1 2 3] <) "sort descending order")
  (assert = @[1 2 3] (sort-by identity @[3 2 1]) "sort-by identity")
  (assert = @[3 2 1] (sort-by - @[3 2 1]) "sort-by reversed")

  (assert = @[0 1 2] (range 3) "(range 3)")
  (assert = @[1 2] (range 1 3) "(range 1 3)")
  (assert = @[0 2] (range 0 4 2) "(range 0 4 2)")
  (assert = @[0 2 4] (range 0 5 2) "(range 0 5 2)")

  (assert = @[:a :a :a] (repeat 3 :a) "(repeat 3 :a)")
  (assert = @[] (repeat 0 :a) "(repeat 0 :a)")

  (assert = @{1 @["a"] 2 @["as" "aa"] 3 @["asd"] 4 @["asdf" "qwer"]}
             (group-by php/strlen ["a" "as" "asd" "aa" "asdf" "qwer"]) "group-by")

  (assert = @{:a 1 :b 2 :c 3} (zipcoll [:a :b :c] [1 2 3]) "zipcoll")

  (assert = @{:a -1 :b 2 :c 3 :d 4} (merge @{:a 1 :b 2} @{:a -1 :c 3} @{:d 4}) "merge")

  (assert = @{1 :a 2 :b} (invert @{:a 1 :b 2}) "invert")
  (assert = @{1 :a 2 :c} (invert @{:a 1 :b 2 :c 2}) "invert duplicate values")

  (assert = [[1 2] [3 4 5]] (split-at 2 [1 2 3 4 5]) "split-at")
  (assert = [[1 2] []] (split-at 3 [1 2]) "split-at empty")

  (assert = [@[1 2 3] @[4 5]] (split-with (partial >= 3) @[1 2 3 4 5]) "split-with")

  (assert = @[] (partition 2 []) "partition-2 empty")
  (assert = @[] (partition 2 [1]) "partition-2 one element")
  (assert = @[[1 2]] (partition 2 [1 2]) "partition-2 two elements")
  (assert = @[[1 2]] (partition 2 [1 2 3]) "partition-2 three elements")
  (assert = @[[1 2] [3 4]] (partition 2 [1 2 3 4]) "partition-2 four elements")
  (assert = @[[1 2] [3 4]] (partition 2 [1 2 3 4 5]) "partition-2 five elements")

  (assert = @[
    [[1 2 [3]] [4]]
    [1 2 [3]]
    1
    2
    [3]
    3
    [4]
    4
  ] (tree-seq indexed? identity [[1 2 [3]] [4]]) "tree-seq")

  (assert = @[1 2 3 4 5 6 7] (flatten [1 [2 [3 4 [5]] 6 [7]]]) "flatten")
  (assert = @[] (flatten nil) "flatten nil")

  # ------------------
  # Function operation
  # ------------------

  (assert = "a" (identity "a") "identity returns itself")

  (assert = 1 ((comp) 1) "compose zero arguments")
  (assert = 2 ((comp inc) 1) "compose one arguments")
  (assert = 3 ((comp inc inc) 1) "compose two arguments")

  (assert = false ((complement and) true true) "complement of and")

  (assert = @[2 1] ((juxt second first) @[1 2]) "juxt")

  (assert = 3 ((partial + 2) 1) "partial of add")

  # -----------------
  # Bitwise operation
  # -----------------

  (assert = 0b1000 (bit-and 0b1100 0b1001) "bit-and of two number")
  (assert = 0b1000 (bit-and 0b1111 0b1001 0b1000) "bit-and of three numbers")

  (assert = 0b1101 (bit-or 0b1100 0b1001) "bit-or of two number")
  (assert = 0b1011 (bit-or 0b0010 0b1001 0b1000) "bit-or of three numbers")

  (assert = 0b0101 (bit-xor 0b1100 0b1001) "bit-xor of two number")
  (assert = 0b0011 (bit-xor 0b0010 0b1001 0b1000) "bit-xor of three numbers")

  (assert = -8 (bit-not 0b0111) "bit-not")

  (assert = 0b1101 (bit-shift-left 0b1101 0) "bit-shift-left 0")
  (assert = 0b11010 (bit-shift-left 0b1101 1) "bit-shift-left 1")
  (assert = 0b110100 (bit-shift-left 0b1101 2) "bit-shift-left 2")
  (assert = 0b1101000 (bit-shift-left 0b1101 3) "bit-shift-left 3")
  (assert = 0b11010000 (bit-shift-left 0b1101 4) "bit-shift-left 4")

  (assert = 0b1101 (bit-shift-right 0b1101 0) "bit-shift-right 0")
  (assert = 0b0110 (bit-shift-right 0b1101 1) "bit-shift-right 1")
  (assert = 0b0011 (bit-shift-right 0b1101 2) "bit-shift-right 2")
  (assert = 0b0001 (bit-shift-right 0b1101 3) "bit-shift-right 3")
  (assert = 0b0000 (bit-shift-right 0b1101 4) "bit-shift-right 4")

  (assert = 0b1111 (bit-set 0b1011 2) "bit-set at pos 2")
  (assert = 0b1011 (bit-set 0b1011 0) "bit-set at pos 0")

  (assert = 0b0011 (bit-clear 0b1011 3) "bit-clear")

  (assert = 0b1111 (bit-flip 0b1011 2) "bit-flip")

  (assert = true (bit-test 0b1011 0) "bit-test")
  (assert = false (bit-test 0b1011 2) "bit-test")

  # --------------
  # Math operation
  # --------------

  (assert = 0 (+) "+ zero arguments")
  (assert = 1 (+ 1) "+ one arguments")
  (assert = 3 (+ 1 2) "+ two arguments")

  (assert = 0 (-) "- zero arguments")
  (assert = -1 (- 1) "- one arguments")
  (assert = 1 (- 2 1) "- two arguments")

  (assert = 1 (*) "* zero arguments")
  (assert = 2 (* 2) "* one arguments")
  (assert = 6 (* 2 3) "* two arguments")
  (assert = 24 (* 2 3 4) "* three arguments")

  (assert = 1 (/) "/ zero arguments")
  (assert = 0.5 (/ 2) "/ one arguments")
  (assert = 2 (/ 4 2) "/ two arguments")
  (assert = 2 (/ 16 4 2) "/ three arguments")

  (assert = 0 (% 10 2) "10 % 2")
  (assert = 1 (% 11 2) "11 % 2")

  (assert = 8 (** 2 3) "2 ** 3")

  (assert = 1 (inc 0) "(inc 0)")
  (assert = 0 (inc -1) "(inc -1)")
  (assert = 2 (inc 1) "(inc 1)")

  (assert = -1 (dec 0) "(inc 0)")
  (assert = -2 (dec -1) "(inc -1)")
  (assert = 0 (dec 1) "(inc 1)")

  (assert = true (even? 0) "(even? 0)")
  (assert = false (even? 1) "(even? 1)")
  (assert = true (even? 2) "(even? 2)")

  (assert = false (odd? 0) "(odd? 0)")
  (assert = true (odd? 1) "(odd? 1)")
  (assert = false (odd? 2) "(odd? 2)")

  (assert = true (zero? 0) "(zero? 0)")
  (assert = true (zero? 0.0) "(zero? 0.0)")
  (assert = false (zero? 0.1) "(zero? 0.1)")
  (assert = false (zero? -0.1) "(zero? -0.1)")

  (assert = true (one? 1) "(one? 1)")
  (assert = true (one? 1.0) "(one? 1.1)")
  (assert = false (one? 0) "(one? 0)")

  (assert = false (pos? 0) "(pos? 1)")
  (assert = true (pos? 1) "(pos? 1)")
  (assert = true (pos? 0.1) "(pos? 0.1)")
  (assert = false (pos? -0.1) "(pos? -0.1)")
  (assert = false (pos? -1) "(pos? -1)")

  (assert = false (neg? 0) "(neg? 1)")
  (assert = false (neg? 1) "(neg? 1)")
  (assert = false (neg? 0.1) "(neg? 0.1)")
  (assert = true (neg? -0.1) "(neg? -0.1)")
  (assert = true (neg? -1) "(neg? -1)")

  (assert = true (nan? (php/acos 8)) "(nan? (php/acos 8)")
  (assert = true (nan? php/NAN) "(nan? (php/NAN))")
  (assert = true (nan? NAN) "(nan? NAN)")
  (assert = false (nan? 9) "(nan? 8)")

  (assert = 1 (min 1 2 3) "(min 1 2 3)")
  (assert = 3 (max 1 2 3) "(max 1 2 3)")

  (assert = 6 (sum [1 2 3]) "(sum [1 2 3])")
  (assert = 0 (sum []) "(sum [])")

  (assert = 2 (mean [1 2 3]) "(mean [1 2 3])")

  # ----------------
  # Print operations
  # ----------------

  (assert = "" (str) "str with no arg")
  (assert = "hello\nworld" (str "hello\nworld") "str with one arg")
  (assert = "ab" (str "a" "b") "str with two args")
  (assert = "abc" (str "a" "b" "c") "str with three args")
  (assert = "[\"a\" \"b\"]" (str ["a" "b"]) "str with tuple of strings")
  (assert = "@[\"a\" \"b\"]" (str @["a" "b"]) "str with array of strings")
  (assert = "@{\"a\" \"b\"}" (str @{"a" "b"}) "str on table")
  (assert = "x" (str 'x) "str on symbol")
  (assert = ":test" (str :test) "str on keyword")
  (assert = "1" (str 1) "str on number")
  (assert = "1" (str true) "str on true")
  (assert = "" (str false) "str on false")
  (assert = "" (str nil nil) "str on nil")

  (assert = "" (print-str) "print-str with no arg")
  (assert = "hello\nworld" (print-str "hello\nworld") "print-str with one arg")
  (assert = "a b" (print-str "a" "b") "print-str with two args")
  (assert = "a b c" (print-str "a" "b" "c") "print-str with three args")
  (assert = "[a b]" (print-str ["a" "b"]) "print-str with tuple of strings")
  (assert = "@[a b]" (print-str @["a" "b"]) "print-str with array of strings")
  (assert = "@{a b}" (print-str @{"a" "b"}) "print-str on table")
  (assert = "x" (print-str 'x) "print-str on symbol")
  (assert = ":test" (print-str :test) "print-str on keyword")
  (assert = "1" (print-str 1) "print-str on number")
  (assert = "true" (print-str true) "print-str on true")
  (assert = "false" (print-str false) "print-str on false")
  (assert = "nil" (print-str nil) "print-str on nil")

  (assert = "hello\nworld" (with-output-buffer (print "hello\nworld")) "print hello\\nworld")

  (assert = "hello\nworld\n" (with-output-buffer (println "hello\nworld")) "println hello\\nworld")

  (let [x (my-struct 1 2 3)]
    (assert = :struct (type x) "struct: common type")
    (assert = true (struct? x) "struct: common type test")
    (assert = false (table? x) "struct is not a table")
    (assert = 1 (get x :a) "struct: get value from struct")
    (assert = (my-struct 12 2 3) (put x :a 12) "struct: put value on struct")
    (assert = true (my-struct? x) "struct: correct type")
    (assert = false (my-struct? :a) "struct: incorrect type"))


  # For loop
  (assert = @[0 1 2] (for [x :range [0 3]] x) "for loop (:range)")
  (assert = @[3 2 1] (for [x :range [3 0 -1]] x) "for loop dec (:range)")
  (assert = @[2 3 4] (for [x :in [1 2 3]] (inc x)) "for loop (:in)")
  (assert = @[1 2 3] (for [x :in @{:a 1 :b 2 :c 3}] x) "for loop on table (:in)")
  (assert = @[0 1 2] (for [x :keys @[1 2 3]] x) "for loop on array (:keys)")
  (assert = @[:a :b :c] (for [x :keys @{:a 1 :b 2 :c 3}] x) "for loop on table (:keys)")
  (assert = @[[1 :a] [2 :b] [3 :c]] (for [[k v] :pairs @{:a 1 :b 2 :c 3}] [v k]) "for loop on table (:pairs)")
  (assert = @[[0 1] [1 2] [2 3]] (for [[k v] :pairs @[1 2 3]] [k v]) "for loop on array (:pairs)")
  (assert = @[2 2 2] (for [x :in [2 2 2 3 3 4 5 6 6] :while (even? x)] x) "for loop (:range :while)")
  (assert = @[2 2 2 4 6 6] (for [x :in [2 2 2 3 3 4 5 6 6] :when (even? x)] x) "for loop (:range :when)")
  (assert = @[[1 2] [2 3] [3 4]] (for [x :in [1 2 3] :let [y (inc x)]] [x y]) "for loop (:range :let)")
  (assert = @[[1 0] [2 0] [2 1] [3 0] [3 1] [3 2]] (for [x :range [0 4] y :range [0 x]] [x y]) "for loop nested")

  (assert = true (>= (php/strpos __FILE__ "tests/phel/test/core.phel") 0) "__FILE__")
  (assert = true (and (false? (php/strpos __DIR__ "tests/phel/test/core.phel")) (>= (php/strpos __DIR__ "tests/phel/test") 0)) "__DIR__")

  __FILE__
))
