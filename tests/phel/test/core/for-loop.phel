(ns phel\test\core
  (:require phel\test :refer [deftest is]))

(deftest test-range
  (is (= @[0 1 2] (range 3)) "(range 3)")
  (is (= @[1 2] (range 1 3)) "(range 1 3)")
  (is (= @[0 2] (range 0 4 2)) "(range 0 4 2)")
  (is (= @[0 2 4] (range 0 5 2)) "(range 0 5 2)"))

(deftest test-for-loop
  (is (= @[0 1 2] (for [x :range [0 3]] x)) "for loop (:range)")
  (is (= @[3 2 1] (for [x :range [3 0 -1]] x)) "for loop dec (:range)")
  (is (= @[2 3 4] (for [x :in [1 2 3]] (inc x))) "for loop (:in)")
  (is (= @[1 2 3] (for [x :in @{:a 1 :b 2 :c 3}] x)) "for loop on table (:in)")
  (is (= @[0 1 2] (for [x :keys @[1 2 3]] x)) "for loop on array (:keys)")
  (is (= @[:a :b :c] (for [x :keys @{:a 1 :b 2 :c 3}] x)) "for loop on table (:keys)")
  (is (= @[[1 :a] [2 :b] [3 :c]] (for [[k v] :pairs @{:a 1 :b 2 :c 3}] [v k])) "for loop on table (:pairs)")
  (is (= @[[0 1] [1 2] [2 3]] (for [[k v] :pairs @[1 2 3]] [k v])) "for loop on array (:pairs)")
  (is (= @[2 2 2] (for [x :in [2 2 2 3 3 4 5 6 6] :while (even? x)] x)) "for loop (:range :while)")
  (is (= @[2 2 2 4 6 6] (for [x :in [2 2 2 3 3 4 5 6 6] :when (even? x)] x)) "for loop (:range :when)")
  (is (= @[[1 2] [2 3] [3 4]] (for [x :in [1 2 3] :let [y (inc x)]] [x y])) "for loop (:range :let)")
  (is (= @[[1 0] [2 0] [2 1] [3 0] [3 1] [3 2]] (for [x :range [0 4] y :range [0 x]] [x y])) "for loop nested"))
