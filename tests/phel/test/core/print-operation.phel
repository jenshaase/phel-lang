(ns phel\test\core\print-operation
  (:require phel\test :refer [deftest is is-equals]))

# ----------------
# Print operations
# ----------------

(deftest test-str
  (is-equals "" (str) "str with no arg")
  (is-equals "hello\nworld" (str "hello\nworld") "str with one arg")
  (is-equals "ab" (str "a" "b") "str with two args")
  (is-equals "abc" (str "a" "b" "c") "str with three args")
  (is-equals "[\"a\" \"b\"]" (str ["a" "b"]) "str with tuple of strings")
  (is-equals "@[\"a\" \"b\"]" (str @["a" "b"]) "str with array of strings")
  (is-equals "@{\"a\" \"b\"}" (str @{"a" "b"}) "str on table")
  (is-equals "(set \"a\" \"b\")" (str (set "a" "b")) "str on set")
  (is-equals "x" (str 'x) "str on symbol")
  (is-equals ":test" (str :test) "str on keyword")
  (is-equals "1" (str 1) "str on number")
  (is-equals "1" (str true) "str on true")
  (is-equals "" (str false) "str on false")
  (is-equals "" (str nil nil) "str on nil"))

(deftest test-print-str
  (is-equals "" (print-str) "print-str with no arg")
  (is-equals "hello\nworld" (print-str "hello\nworld") "print-str with one arg")
  (is-equals "a b" (print-str "a" "b") "print-str with two args")
  (is-equals "a b c" (print-str "a" "b" "c") "print-str with three args")
  (is-equals "[a b]" (print-str ["a" "b"]) "print-str with tuple of strings")
  (is-equals "@[a b]" (print-str @["a" "b"]) "print-str with array of strings")
  (is-equals "@{a b}" (print-str @{"a" "b"}) "print-str on table")
  (is-equals "(set a b)" (print-str (set "a" "b")) "print-str on set")
  (is-equals "x" (print-str 'x) "print-str on symbol")
  (is-equals ":test" (print-str :test) "print-str on keyword")
  (is-equals "1" (print-str 1) "print-str on number")
  (is-equals "true" (print-str true) "print-str on true")
  (is-equals "false" (print-str false) "print-str on false")
  (is-equals "nil" (print-str nil) "print-str on nil"))

(deftest test-print
  (is (output? "hello\nworld" (print "hello\nworld")) "print hello\\nworld"))

(deftest test-println
  (is (output? "hello\nworld\n" (println "hello\nworld")) "println hello\\nworld"))

(deftest test-format
  (is-equals "" (format "") "format with empty fmt")
  (is-equals "" (format "" "hello") "format with empty fmt and one arg")
  (is-equals "hello\nworld" (format "%s" "hello\nworld") "format one string")
  (is-equals "hello 1" (format "%s %d" "hello" 1) "format with different types")
  (is-equals "[\"a\" \"b\"]" (format "%s" ["a" "b"]) "format with tuple of strings")
  (is-equals "@[\"a\" \"b\"]" (format "%s" @["a" "b"]) "format with array of strings")
  (is-equals "@{\"a\" \"b\"}" (format "%s" @{"a" "b"}) "format on table")
  (is-equals "(set \"a\" \"b\")" (format "%s" (set "a" "b")) "format on set")
  (is-equals "x" (format "%s" 'x) "format on symbol")
  (is-equals ":test" (format "%s" :test) "format on keyword")
  (is-equals "1" (format "%d" 1) "format on number")
  (is-equals "1" (format "%d" true) "format on true")
  (is-equals "0" (format "%d" false) "format on false")
  (is-equals "" (format "%s" nil) "format on nil"))

(deftest test-printf
  (is (output? "hello\nworld" (printf "%s\n%s" "hello" "world")) "printf hello\\nworld"))
