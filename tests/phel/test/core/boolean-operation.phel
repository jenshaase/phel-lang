(ns phel\test\core
  (:require phel\test :refer [deftest is]))

# ----------------
# Boolean operation
# ----------------

(deftest test-or
  (is (= nil (or)) "or zero args")
  (is (= true (or true)) "(or true)")
  (is (= false (or false)) "(or false")
  (is (= true (or true false)) "(or true false)")
  (is (= true (or false true)) "(or false true)")
  (is (= false (or false false)) "(or false false)")
  (is (= 10 (or false 10)) "(or false 10)")
  (is (= 10 (or 10)) "(or 10)"))

(deftest test-and
  (is (= true (and)) "(and)")
  (is (= true (and true)) "(and true)")
  (is (= true (and true true)) "(and true true)")
  (is (= false (and false)) "(and false)")
  (is (= false (and true false)) "(and true false)")
  (is (= false (and true false true)) "(and true false true)")
  (is (= 10 (and true 10)) "(and true 10)")
  (is (= false (and false 10)) "(and false 10)")
  (is (= 10 (and 10)) "(and 10)"))

(deftest test-id
  (is (= true (id false)) "(id false)")
  (is (= true (id false false)) "(id false false)")
  (is (= true (id false false false)) "(id false false false)")
  (is (= false (id false true false)) "(id false true false)")
  (is (= true (id 10 10)) "(id 10 10)")
  (is (= false (id 10 10.0)) "(id 10 10.0)")
  (is (= true (id :test :test)) "keywords are always identical")
  (is (= true (id 'test 'test)) "symbol are always identical")
  (is (= false (id [] [])) "two empty tuples are not identical")
  (is (= false (id @[] @[])) "two empty arrays are not identical")
  (is (= false (id @{} @{})) "two empty tables are not identical"))

(deftest test-=
  (is (= true (= false)) "(= false)")
  (is (= true (= false false)) "(= false false)")
  (is (= true (= false false false)) "(= false false false)")
  (is (= false (= false true false)) "(= false true false)")
  (is (= true (= 10 10)) "(= 10 10)")
  (is (= false (= 10 10.0)) "(= 10 10.0)")
  (is (= true (= :test :test)) "keywords are always equal")
  (is (= true (= 'test 'test)) "symbol are always equal")
  (is (= true (= [] [])) "two empty tuples are equal")
  (is (= true (= @[] @[])) "two empty arrays are equal")
  (is (= true (= @{} @{})) "two empty tables are equal"))

(deftest test-not
  (is (= false (not true)) "(not true)")
  (is (= true (not false)) "(not false)")
  (is (= false (not 10)) "(not 10)")
  (is (= false (not [])) "(not [])"))

(deftest test-not=
  (is (= false (not= false)) "(not= false)")
  (is (= false (not= false false)) "(not= false false)")
  (is (= false (not= false false false)) "(not= false false false)")
  (is (= true (not= false true false)) "(not= false true false)")
  (is (= false (not= 10 10)) "(not= 10 10)")
  (is (= true (not= 10 10.0)) "(not= 10 10.0)"))

(deftest test-<
  (is (= true (< 10)) "(< 10)")
  (is (= true (< 10 20)) "(< 10 20)")
  (is (= true (< 10 20 30)) "(< 10 20 30)")
  (is (= false (< 10 10)) "(< 10 10)")
  (is (= false (< 10 9)) "(< 10 9)")
  (is (= false (< 10 20 15)) "(< 10 20 15)")
  (is (= false (< 10 20 20)) "(< 10 20 20)"))

(deftest test-<=
  (is (= true (<= 10)) "(<= 10)")
  (is (= true (<= 10 20)) "(<= 10 20)")
  (is (= true (<= 10 20 30)) "(<= 10 20 30)")
  (is (= true (<= 10 10)) "(<= 10 10)")
  (is (= false (<= 10 9)) "(<= 10 9)")
  (is (= false (<= 10 20 15)) "(<= 10 20 15)")
  (is (= true (<= 10 20 20)) "(<= 10 20 20)"))

(deftest test->
  (is (= true (> 10)) "(> 10)")
  (is (= true (> 20 10)) "(> 20 10)")
  (is (= true (> 30 20 10)) "(> 30 20 10)")
  (is (= false (> 10 10)) "(> 10 10)")
  (is (= false (> 9 10)) "(> 9 10)")
  (is (= false (> 20 10 15)) "(> 20 20 15)")
  (is (= false (> 20 20 10)) "(> 20 20 10)"))

(deftest test->=
  (is (= true (>= 10)) "(>= 10)")
  (is (= true (>= 20 10)) "(>= 20 10)")
  (is (= true (>= 30 20 10)) "(>= 30 20 10)")
  (is (= true (>= 10 10)) "(>= 10 10)")
  (is (= false (>= 9 10)) "(>= 9 10)")
  (is (= false (>= 20 10 15)) "(>= 20 20 15)")
  (is (= true (>= 20 20 10)) "(>= 20 20 10)"))

(deftest test-all?
  (is (= true (all? pos? @[1 2 3])) "all pos? in list")
  (is (= true (all? pos? @[])) "all pos? in empty list")
  (is (= false (all? pos? @[1 -1 3])) "all pos? in list"))

(deftest test-some?
  (is (= true (some? pos? @[1 2 3])) "some pos? in list")
  (is (= false (some? pos? @[])) "some pos? in empty list")
  (is (= true (some? pos? @[1 -1 3])) "some pos? in list")
  (is (= false (some? pos? @[-1 -1 -3])) "some pos? in list"))

(deftest test-true?
  (is (= true (true? true)) "(true? true)")
  (is (= false (true? [])) "(true? [])")
  (is (= false (true? 10)) "(true? 10)")
  (is (= false (true? nil)) "(true? nil)")
  (is (= false (true? false)) "(true? false)"))

(deftest test-truthy?
  (is (= true (truthy? true)) "(truthy? true)")
  (is (= true (truthy? [])) "(truthy? [])")
  (is (= true (truthy? 10)) "(truthy? 10)")
  (is (= false (truthy? nil)) "(truthy? nil)")
  (is (= false (truthy? false)) "(truthy? false)"))

(deftest test-false?
  (is (= true (false? false)) "(false? false)")
  (is (= false (false? nil)) "(false? nil)")
  (is (= false (false? true)) "(false? true)"))

(deftest test-str-contains?
  (is (true? (str-contains? "abc" "a")))
  (is (false? (str-contains? "abc" "d"))))

(deftest test-compare
  (is (= -1 (compare 1 2)) "(compare 1 2)")
  (is (= 1 (compare 2 1)) "(compare 2 1)")
  (is (= 0 (compare 1 1)) "(compare 1 1)"))
