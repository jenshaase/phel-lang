(ns phel\test\core\sequence-functions
  (:require phel\test :refer [deftest is-equals is-nil]))

# ------------------
# Sequence operation
# ------------------

(deftest test-map
  (is-equals @["1" "2"] (map str [1 2]) "map1")
  (is-equals @["13" "24"] (map str [1 2] [3 4]) "map2")
  (is-equals @["13" "24"] (map str [1 2 10] [3 4]) "map2 unequal size"))

(deftest test-map-indexed
  (is-equals @[[0 "a"] [1 "b"] [2 "c"]] (map-indexed tuple-brackets ["a" "b" "c"]) "map-indexed"))

(deftest test-mapcat
  (is-equals @[1 2 3 4 5 6] (mapcat reverse [[3 2 1] [6 5 4]]) "mapcat")
  (is-equals @[] (mapcat identity []) "mapcat on empty tuple")
  (is-equals @[] (mapcat identity @[]) "mapcat on empty array"))

(deftest test-reduce
  (is-equals "abc" (reduce str "" ["a" "b" "c"]) "reduce three elements tuple")
  (is-equals "abc" (reduce str "" [nil "a" "b" "c"]) "reduce tuple containing a nil value")
  (is-equals "x" (reduce str "x" []) "reduce empty tuple")
  (is-equals 6 (reduce + 0 (set 1 2 3)) "reduce on set"))

(deftest test-reduce2
  (is-equals "abc" (reduce2 str ["a" "b" "c"]) "reduce2 three elements tuple")
  (is-equals "abc" (reduce2 str [nil "a" "b" "c"]) "reduce2 tuple containing a nil value")
  (is-equals "a" (reduce2 str ["a"]) "reduce2 one element tuple")
  (is-nil (reduce2 str []) "reduce2 empty tuple")
  (is-equals 6 (reduce2 + (set 1 2 3)) "reduce2 on set tuple"))

(deftest test-put-in
  (is-equals @{:a @{:b @{:c 1}}} (put-in @{:a @{}} @[:a :b :c] 1) "put-in: autocreate tables")
  (is-equals @{:a @{:b @{:c 2}}} (put-in @{:a @{:b @{:c 1}}} @[:a :b :c] 2) "put-in: update value of table")
  (is-equals @{:a @{:b @[2]}} (put-in @{:a @{:b @[1]}} @[:a :b 0] 2) "put-in: update value of array"))

(deftest test-update-in
  (is-equals @{:a 2} (update-in @{:a 1} @[:a] inc) "update-in: update value of table")
  (is-equals @{:a @{:b @{:c 1}}} (update-in @{:a @{}} @[:a :b :c] inc) "update-in: autocreate tables")
  (is-equals @{:a @{:b @[2]}} (update-in @{:a @{:b @[1]}} @[:a :b 0] inc) "update-in: update value of array"))

(deftest test-drop
  (is-equals @["a" "b" "c"] (drop 0 @["a" "b" "c"]) "drop two elements")
  (is-equals @["c"] (drop 2 @["a" "b" "c"]) "drop two elements")
  (is-equals @[] (drop 3 @["a" "b" "c"]) "drop three elements")
  (is-equals @[] (drop 4 @["a" "b" "c"]) "drop four elements")
  (is-equals @["a" "b" "c"] (drop -1 @["a" "b" "c"]) "drop with negative number")
  (is-equals ["c"] (drop 2 ["a" "b" "c"]) "drop on tuple")
  (is-equals (php/array "c") (drop 2 (php/array "a" "b" "c")) "drop on php array"))

(deftest test-drop-while
  (is-equals @[1 2 3 4 -1 -2 -3] (drop-while neg? @[-1 -2 -3 1 2 3 4 -1 -2 -3]) "drop-while: first three element")
  (is-equals @[] (drop-while neg? @[-1 -2 -3]) "drop-while: everything")
  (is-equals @[] (drop-while neg? @[]) "drop-while: empty array")
  (is-equals @[1 2 3 4] (drop-while neg? @[1 2 3 4]) "drop-while: nothing")
  (is-equals [1 2 3 4 -1 -2 -3] (drop-while neg? [-1 -2 -3 1 2 3 4 -1 -2 -3]) "drop-while: tuple")
  (is-equals (php/array 1 2 3 4 -1 -2 -3) (drop-while neg? (php/array -1 -2 -3 1 2 3 4 -1 -2 -3)) "drop-while: php array"))

(deftest test-take
  (is-equals @["a" "b"] (take 2 @["a" "b" "c"]) "take two elements")
  (is-equals @["a" "b" "c"] (take 3 @["a" "b" "c"]) "take three elements")
  (is-equals @["a" "b" "c"] (take 4 @["a" "b" "c"]) "take four elements")
  (is-equals @[] (take 0 @["a" "b" "c"]) "take zero elements")
  (is-equals @[] (take -1 @["a" "b" "c"]) "take with negative number")
  (is-equals ["a" "b"] (take 2 ["a" "b" "c"]) "take on tuple")
  (is-equals (php/array "a" "b") (take 2 (php/array "a" "b" "c")) "take on php array"))

(deftest test-take-while
  (is-equals @[-1 -2 -3] (take-while neg? @[-1 -2 -3 1 2 3 4 -4 -5 -6]) "take-while: first three element")
  (is-equals @[-1 -2 -3] (take-while neg? @[-1 -2 -3]) "take-while: everything")
  (is-equals @[] (take-while neg? @[1 2 3 4]) "take-while: nothing")
  (is-equals @[] (take-while neg? @[]) "take-while: empty array")
  (is-equals @[-1 -2 -3] (take-while neg? [-1 -2 -3 1 2 3 4 -4 -5 -6]) "take-while on tuple")
  (is-equals @[-1 -2 -3] (take-while neg? (php/array -1 -2 -3 1 2 3 4 -4 -5 -6)) "take-while on php array"))

(deftest test-filter
  (is-equals @[-1 -2 -3] (filter neg? @[-1 2 3 -2 -3 4 5]) "filter: neg?")
  (is-equals @[-1 -2 -3] (filter neg? [-1 2 3 -2 -3 4 5]) "filter on tuple")
  (is-equals @[-1 -2 -3] (filter neg? (php/array -1 2 3 -2 -3 4 5)) "filter on php array"))

(deftest test-keep
  (is-equals @[true false false true true false false] (keep neg? @[-1 2 3 -2 -3 4 5]) "keep: neg?")
  (is-equals @[-1 -2 -3] (keep (fn [x] (if (neg? x) x nil)) @[-1 2 3 -2 -3 4 5]) "keep: filter nil"))

(deftest test-keep-indexed
  (is-equals @[:b :d] (keep-indexed (fn [idx x] (if (odd? idx) x)) @[:a :b :c :d :e]) "keep-indexed"))

(deftest test-neg?
  (is-equals -1 (find neg? @[1 2 3 -1 2 3]) "find first neg number")
  (is-nil (find neg? @[1 2 3 2 3]) "find: nothing to find")
  (is-nil (find neg? @[]) "find on empty array"))

(deftest test-find-index?
  (is-equals 3 (find-index neg? @[1 2 3 -1 2 3]) "find-index first neg number")
  (is-nil (find-index neg? @[1 2 3 2 3]) "find-index: nothing to find")
  (is-nil (find-index neg? @[]) "find-index on empty array"))

(deftest test-distinct
  (is-equals @[1 2 3] (distinct @[1 1 2 3 2 2 3 1]) "distinct: array")
  (is-equals @[1 2 3] (distinct (php/array 1 1 2 3 2 2 3 1)) "distinct: php array"))

(deftest test-reverse
  (is-equals @[3 2 1] (reverse [1 2 3]) "reverse: tuple")
  (is-equals @[3 2 1] (reverse @[1 2 3]) "reverse: array")
  (is-equals @[] (reverse nil) "reverse: nil"))

(deftest test-interleave
  (is-equals @[:a 1 :b 2 :c 3] (interleave [:a :b :c] [1 2 3]) "interleave equal size")
  (is-equals @[:a 1 :b 2] (interleave [:a :b :c] [1 2]) "interleave different size"))

(deftest test-interpose
  (is-equals @["a" "," "b" "," "c"] (interpose "," ["a" "b" "c"]) "interpose"))

(deftest test-frequencies
  (is-equals @{1 2 2 3 3 2 4 1} (frequencies [1 1 2 3 2 2 3 4]) "frequencies"))

(deftest test-keys
  (is-equals @[:a :b :c] (keys @{:a 1 :b 2 :c 3}) "keys of tables")
  (is-equals @[0 1 2] (keys @[3 2 1]) "keys of array")
  (is-equals @[0 1 2] (keys [3 2 1]) "keys of tuple"))

(deftest test-values
  (is-equals @[1 2 3] (values @{:a 1 :b 2 :c 3}) "values of tables")
  (is-equals @[3 2 1] (values @[3 2 1]) "values of array")
  (is-equals @[3 2 1] (values [3 2 1]) "values of tuple"))

(deftest test-pairs
  (is-equals @[[:a 1] [:b 2] [:c 3]] (pairs @{:a 1 :b 2 :c 3}) "pairs of tables")
  (is-equals @[[0 3] [1 2] [2 1]] (pairs @[3 2 1]) "pairs of array")
  (is-equals @[[0 3] [1 2] [2 1]] (pairs [3 2 1]) "pairs of tuple"))

(deftest test-kvs
  (is-equals @[:a 1 :b 2 :c 3] (kvs @{:a 1 :b 2 :c 3}) "kvs of tables")
  (is-equals @[0 3 1 2 2 1] (kvs @[3 2 1]) "kvs of array")
  (is-equals @[0 3 1 2 2 1] (kvs [3 2 1]) "kvs of tuple"))

(deftest test-to-php-array
  (is-equals (php/array 3 2 1) (to-php-array @[3 2 1]) "to-php-array"))

(deftest test-sort
  (is-equals @[1 2 3] (sort @[3 2 1]) "sort")
  (is-equals @[3 3 2 2 1] (sort @[3 2 1 2 3] <) "sort descending order")
  (is-equals @[1 2 3] (sort-by identity @[3 2 1]) "sort-by identity")
  (is-equals @[3 2 1] (sort-by - @[3 2 1]) "sort-by reversed"))

(deftest test-repeat
  (is-equals @[:a :a :a] (repeat 3 :a) "(repeat 3 :a)")
  (is-equals @[] (repeat 0 :a) "(repeat 0 :a)"))

(deftest test-group-by
  (is-equals @{1 @["a"] 2 @["as" "aa"] 3 @["asd"] 4 @["asdf" "qwer"]}
             (group-by php/strlen ["a" "as" "asd" "aa" "asdf" "qwer"]) "group-by"))

(deftest test-zipcoll
  (is-equals @{:a 1 :b 2 :c 3} (zipcoll [:a :b :c] [1 2 3]) "zipcoll"))

(deftest test-merge
  (is-equals @{:a -1 :b 2 :c 3 :d 4} (merge @{:a 1 :b 2} @{:a -1 :c 3} @{:d 4}) "merge"))

(deftest test-invert
  (is-equals @{1 :a 2 :b} (invert @{:a 1 :b 2}) "invert")
  (is-equals @{1 :a 2 :c} (invert @{:a 1 :b 2 :c 2}) "invert duplicate values"))

(deftest test-split-at
  (is-equals [[1 2] [3 4 5]] (split-at 2 [1 2 3 4 5]) "split-at")
  (is-equals [[1 2] []] (split-at 3 [1 2]) "split-at empty"))

(deftest test-split-with
  (is-equals [@[1 2 3] @[4 5]] (split-with (partial >= 3) @[1 2 3 4 5]) "split-with"))

(deftest test-partition
  (is-equals @[] (partition 2 []) "partition-2 empty")
  (is-equals @[] (partition 2 [1]) "partition-2 one element")
  (is-equals @[[1 2]] (partition 2 [1 2]) "partition-2 two elements")
  (is-equals @[[1 2]] (partition 2 [1 2 3]) "partition-2 three elements")
  (is-equals @[[1 2] [3 4]] (partition 2 [1 2 3 4]) "partition-2 four elements")
  (is-equals @[[1 2] [3 4]] (partition 2 [1 2 3 4 5]) "partition-2 five elements"))
