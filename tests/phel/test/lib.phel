(ns phel\test\lib)

(def stats @{})

(defn assert [test expected got label]
  (do
    (update-in stats [:total] inc)
    (if (test expected got)
      (do
        (update-in stats [:successful] inc)
        (print ".")
        (when (= (% (get stats :total) 80) 0)
          (println)))
      (do
        (update-in stats [:failed] inc)
        (php/print "\n")
        (php/print label)
        (php/print " - Expected: ")
        (print expected)
        (php/print ", Got: ")
        (print got)
        (php/print "\n")))))

(defn print-summary [title]
  (do
    (print "\n\n")
    (println "Summary of: " title)
    (print "Successful: ")
    (print (get stats :successful))
    (print "\n")
    (print "Failed: ")
    (print (get stats :failed))
    (print "\n")
    (print "Total: ")
    (print (get stats :total))
    (print "\n")))

(defn testsuite [suite]
  (do
    (put stats :total 0)
    (put stats :failed 0)
    (put stats :successful 0)
    (let [title (suite assert)]
      (print-summary title))
    (when (> (get stats :failed) 0)
      (php/exit 1))))

(defn testsuites [& suites]
  (foreach [suite suites]
    (testsuite suite)))
